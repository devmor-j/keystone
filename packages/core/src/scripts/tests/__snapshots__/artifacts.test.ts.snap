// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`postinstall writes the correct node_modules files 1`] = `
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ node_modules/.keystone/index.d.ts ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
type Scalars = {
  readonly ID: string;
  readonly Boolean: boolean;
  readonly String: string;
  readonly Int: number;
  readonly Float: number;
  readonly JSON: import("@keystone-6/core/types").JSONValue;
  readonly Decimal: import("@keystone-6/core/types").Decimal | string;
};

export type TodoWhereUniqueInput = {
  readonly id?: Scalars["ID"] | null;
};

export type TodoWhereInput = {
  readonly AND?: ReadonlyArray<TodoWhereInput> | TodoWhereInput | null;
  readonly OR?: ReadonlyArray<TodoWhereInput> | TodoWhereInput | null;
  readonly NOT?: ReadonlyArray<TodoWhereInput> | TodoWhereInput | null;
  readonly id?: IDFilter | null;
  readonly title?: StringFilter | null;
};

export type IDFilter = {
  readonly equals?: Scalars["ID"] | null;
  readonly in?: ReadonlyArray<Scalars["ID"]> | Scalars["ID"] | null;
  readonly notIn?: ReadonlyArray<Scalars["ID"]> | Scalars["ID"] | null;
  readonly lt?: Scalars["ID"] | null;
  readonly lte?: Scalars["ID"] | null;
  readonly gt?: Scalars["ID"] | null;
  readonly gte?: Scalars["ID"] | null;
  readonly not?: IDFilter | null;
};

export type StringFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly not?: NestedStringFilter | null;
};

export type NestedStringFilter = {
  readonly equals?: Scalars["String"] | null;
  readonly in?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly notIn?: ReadonlyArray<Scalars["String"]> | Scalars["String"] | null;
  readonly lt?: Scalars["String"] | null;
  readonly lte?: Scalars["String"] | null;
  readonly gt?: Scalars["String"] | null;
  readonly gte?: Scalars["String"] | null;
  readonly contains?: Scalars["String"] | null;
  readonly startsWith?: Scalars["String"] | null;
  readonly endsWith?: Scalars["String"] | null;
  readonly not?: NestedStringFilter | null;
};

export type TodoOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly title?: OrderDirection | null;
};

export type OrderDirection =
  | "asc"
  | "desc";

export type TodoUpdateInput = {
  readonly title?: Scalars["String"] | null;
};

export type TodoUpdateArgs = {
  readonly where: TodoWhereUniqueInput;
  readonly data: TodoUpdateInput;
};

export type TodoCreateInput = {
  readonly title?: Scalars["String"] | null;
};

export type KeystoneAdminUIFieldMetaCreateViewFieldMode =
  | "edit"
  | "hidden";

export type KeystoneAdminUIFieldMetaListViewFieldMode =
  | "read"
  | "hidden";

export type KeystoneAdminUIFieldMetaItemViewFieldMode =
  | "edit"
  | "read"
  | "hidden";

export type QueryMode =
  | "default"
  | "insensitive";

export type KeystoneAdminUISortDirection =
  | "ASC"
  | "DESC";


export declare namespace Lists {
  export type Todo = import('@keystone-6/core').ListConfig<Lists.Todo.TypeInfo, any>;
  namespace Todo {
    export type Item = import('.prisma/client').Todo;
    export type TypeInfo = {
      key: "Todo";
      fields: "id" | "title"
      item: Item;
      inputs: {
        where: TodoWhereInput;
        uniqueWhere: TodoWhereUniqueInput;
        create: TodoCreateInput;
        update: TodoUpdateInput;
        orderBy: TodoOrderByInput;
      };
      all: __TypeInfo;
    };
  }
}
export type Context = import('@keystone-6/core/types').KeystoneContext<TypeInfo>;

export type TypeInfo = {
  lists: {
  readonly Todo: Lists.Todo.TypeInfo;
  };
  prisma: import('.prisma/client').PrismaClient;
};

type __TypeInfo = TypeInfo;

export type Lists = {
  [Key in keyof TypeInfo['lists']]?: import('@keystone-6/core').ListConfig<TypeInfo['lists'][Key], any>
} & Record<string, import('@keystone-6/core').ListConfig<any, any>>;

export * as graphql from './internal/graphql-ts';

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ node_modules/.keystone/index.js ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
exports.graphql = require('@keystone-6/core').graphql;
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ node_modules/.keystone/internal/graphql-ts-with-context.d.ts ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
import { GraphQLSchemaAPIWithContext } from '@keystone-6/core/___internal-do-not-use-will-break-in-patch/graphql-ts';
import { Context } from './graphql-ts';

declare const __graphql: GraphQLSchemaAPIWithContext<Context>;

export = __graphql;

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ node_modules/.keystone/internal/graphql-ts.d.ts ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
import * as graphqlTsSchema from '@keystone-6/core/___internal-do-not-use-will-break-in-patch/graphql-ts';
import type { Context } from '../index';
export * from '@keystone-6/core/___internal-do-not-use-will-break-in-patch/graphql-ts-without-context';
export { field, fields, interface, interfaceField, object, union } from './graphql-ts-with-context';

export type { Context }

export type NullableType = graphqlTsSchema.NullableType<Context>;
export type Type = graphqlTsSchema.Type<Context>;
export type NullableOutputType = graphqlTsSchema.NullableOutputType<Context>;
export type OutputType = graphqlTsSchema.OutputType<Context>;
export type Field<
  Source,
  Args extends Record<string, graphqlTsSchema.Arg<any>>,
  TType extends OutputType,
  Key extends string
> = graphqlTsSchema.Field<Source, Args, TType, Key, Context>;
export type FieldResolver<
  Source,
  Args extends Record<string, graphqlTsSchema.Arg<any>>,
  TType extends OutputType
> = graphqlTsSchema.FieldResolver<Source, Args, TType, Context>;
export type ObjectType<Source> = graphqlTsSchema.ObjectType<Source, Context>;
export type UnionType<Source> = graphqlTsSchema.UnionType<Source, Context>;
export type InterfaceType<
  Source,
  Fields extends Record<string, graphqlTsSchema.InterfaceField<any, OutputType, Context>>
> = graphqlTsSchema.InterfaceType<Source, Fields, Context>;
export type InterfaceField<
  Args extends Record<string, graphqlTsSchema.Arg<any>>,
  TType extends OutputType
> = graphqlTsSchema.InterfaceField<Args, TType, Context>;

`;
